# -*- coding: utf-8 -*-
"""Customer Segmentation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l42YN9GiHnpiQ_fLhKrg2mRaHYr7ONsL
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans

customer_data = pd.read_csv('/content/drive/MyDrive/ML datasets/Mall Customer segmentation/Mall_Customers.csv')
customer_data.head()

customer_data.shape

customer_data.isnull().sum()

# we will cluster the customers based on their annual income and spending score
x = customer_data.iloc[:,[3,4]].values

# here 3,4 means the number of columns. 3rd column and the 4th column.

print(x)

"""# Choosing the number of clusters
Here we will use a function called WCSS to find how many clusters will be appropriate for our model. This function determines the distance between each data and their centroid and make different groups based on those distance.

"""

#finding wcss values for different number of clusters
# we need to find for which number of clusters there is minimum wcss value

wcss = []
for i in range(1, 11):
  kmeans = KMeans(n_clusters = i, init ='k-means++', random_state = 42)
  kmeans.fit(x)

  wcss.append(kmeans.inertia_)

# we will see the result in a graph
sns.set()
plt.plot(range(1,11), wcss)
plt.title('The Elbow Point Graph')
plt.xlabel('Number of clusters')
plt.ylabel('wcss')
plt.show()

# the drop or elbow looking point is our answer

"""optimal number of clusters = 5

## Training the k-means clustering model
"""

kmeans = KMeans(n_clusters = 5, init='k-means++', random_state = 0)

#return a label for each data point based on their clusters
y = kmeans.fit_predict(x)
# this will fit all the values and find which clusters each data belong to
print(y)

"""## Visualizing all the clusters"""

plt.figure(figsize = (6,6))
plt.scatter(x[y==0,0], x[y==0,1],s = 50, c = 'green', label = 'cluster 1')
plt.scatter(x[y==1,0], x[y==1,1],s = 50, c = 'red', label = 'cluster 1')
plt.scatter(x[y==2,0], x[y==2,1],s = 50, c = 'violet', label = 'cluster 1')
plt.scatter(x[y==3,0], x[y==3,1],s = 50, c = 'yellow', label = 'cluster 1')
plt.scatter(x[y==4,0], x[y==4,1],s = 50, c = 'blue', label = 'cluster 1')

#plotting the centroids
plt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1], s = 100, c = 'black', label = 'Centroid')

plt.title('Customer Groups')
plt.xlabel('Annual Income')
plt.ylabel('Store score')
plt.show()

